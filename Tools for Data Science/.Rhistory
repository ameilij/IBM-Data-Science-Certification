ER=(B/p)
ER
if ((B/p)>0.10) ("La estimacion no es confiable, se sugiere aumentar n") else ("La estimacion es confiable")
#library(dplyr)
#Muestra sin reemplazo
#flightsmuestra2<- flights %>%
#  sample_n(size=n,replace=FALSE)
#head(flightsmuestra2)
#flightsmuestra3<- flights %>%
#  sample_n(size=n,weight=Freq)
#head(flightsmuestra3)
help(Distributions)
help(dnorm)
curve(dnorm(x, mean = 100, sd = 20),
xlim = c(20, 180))
legend("topright",
c(paste("mu =", 100), paste("SD =", 20)),
bty = "n")
rbinom(n = 1, size = 1000, prob = 0.52)
#Usando replicate.
numventas = 300
(ventas = replicate(n = numventas, {
rbinom(n = 1, size = 1000, prob = 0.52)
}))
#Proporci?n
sum(ventas > 540) / numventas
#La probabilidad calculada con la binomial es:
pbinom(540, size = 1000, prob = 0.52)
library(tidyverse)
test <- read_csv("test_table.csv")
sample_size=function(error,p=0.5,alpha=1-0.95){
A0=2*error
n=ceiling(qnorm(1-alpha/2)^2/A0^2)
n
}
sample_size(c(0.05,0.03,0.02,0.01))
tabla_n=data.frame(error=c(0.05,0.03,0.02,0.01),
n=sample_size(c(0.05,0.03,0.02,0.01),alpha=1-0.95), conf.level=0.95)
tabla_n
tabla_n=data.frame(error=c(0.05,0.03,0.02,0.01),
n=sample_size(c(0.05,0.03,0.02,0.01),alpha=1-0.99), conf.level=0.99)
tabla_n
muestra=c(521, 100, 593, 535, 488, 317, 206, 639, 866, 624)
muestra
t.test(muestra,conf.level = 0.95)$conf.int
n=length(muestra)
n
alpha=1-0.95
alpha
media=mean(muestra)
media
stilde=sd(muestra)
stilde
IC=c(media-qt(1-alpha/2,df=n-1)*stilde/sqrt(n),media+qt(1-alpha/2,df=n-1)*stilde/sqrt(n))
IC
t.test(muestra,conf.level = 0.9)$conf.int
n=length(muestra)
n
alpha=1-0.95
alpha
media=mean(muestra)
media
stilde=sd(muestra)
stilde
IC=c(media-qt(1-alpha/2,df=n-1)*stilde/sqrt(n),media+qt(1-alpha/2,df=n-1)*stilde/sqrt(n))
IC
EnvStats::varTest(muestra,conf.level=0.95)$conf.int
EnvStats::varTest(muestra,conf.level=0.9)$conf.int
datos=matrix(c(200,300,210,540),nrow=2,byrow = TRUE)
dimnames(datos)=list(c("Madrid","Barcelona"),c("Sí","No"))
datos
prop.test(datos)
fisher.test(datos)
xbar = 9900            # Media de nuestra muestra
mu = 10000            # Valor hipotético
sigma = 120            # Desviacion estandar de la población
n = 30                 # Tamaño de la muestra
z = (xbar-mu)/(sigma/sqrt(n))
z                      # Valor del test estadístico
alpha = .05
z.alpha = qnorm(1-alpha)
-z.alpha                   # Valor crítico
knitr::opts_chunk$set(echo = TRUE)
df2 <- df1[,c('trm','wti','niquel','carbon')]
# Cargar data frames en memoria
load("data/trm_df")
load("data/palma_df")
load("data/oro_df")
load("data/wti_df")
load("data/cafe_df")
load("data/banana_df")
load("data/niquel_df")
load("data/gasoil_df")
load("data/polipropileno_df")
load("data/hulla_df")
load("data/carbon_df")
# Merge data frames
df1 <- merge(trm_df, palma_df)
df1 <- merge(df1, oro_df)
df1 <- merge(df1, wti_df)
df1 <- merge(df1, cafe_df)
df1 <- merge(df1, banana_df)
df1 <- merge(df1, niquel_df)
df1 <- merge(df1, gasoil_df)
df1 <- merge(df1, polipropileno_df)
df1 <- merge(df1, hulla_df)
df1 <- merge(df1, carbon_df)
dim(df1)
df2 <- df1[,c('trm','wti','niquel','carbon')]
summary(df2)
df2 <- df1[,c('trm','wti','niquel','carbon')]
summary(df2)
?glm
modelo <- glm(TRM ~ wti + niquel + carbon, data = df2)
modelo <- glm(trm ~ wti + niquel + carbon, data = df2)
modelo
summary(modelo)
modelo <- glm(trm ~ wti + niquel + carbon, data = df2)
summary(modelo)
modelo$R
modelo <- lm(trm ~ wti + niquel + carbon, data = df2)
summary(modelo)
install.packages("gvlma")
librray(glvma)
library(gvlma)
glvma(modelo)
gvlma(modelo)
qplot(modelo$residuals)
library(ggplot2)
qplot(modelo$residuals)
plot(modelo$residuals)
install.packages("grid")
install.packages("grid")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(grid)
g1 <- qplot(modelo$residuals)
g2 <- qplot(modelo$residuals, type = "s")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(grid)
g1 <- qplot(modelo$residuals)
g2 <- qplot(modelo$residuals)
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals)
g2 <- qplot(modelo$residuals)
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals, bins = 20)
g2 <- qplot(modelo$residuals)
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals, bins = 20)
g2 <- qplot(modelo$residuals) + geom_jitter()
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals, bins = 20)
g2 <- qplot(modelo$residuals) + geom_point()
grid.arrange(g1, g2, nrow=1)
dim(modelo)
sum(modelo)
count(modelo$residuals)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals, bins = 20)
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point()
grid.arrange(g1, g2, nrow=1)
library(car)
vif(modelo)
library(ggplot2)
library(gridExtra)
g1 <- ggplot( aes(x=modelo$residuals)) + geom_histogram( binwidth=3,
fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") +
theme_ipsum() + theme(plot.title = element_text(size=15))
library(ggplot2)
library(gridExtra)
g1 <- ggplot( data = modelo$residuals, aes(x=value)) + geom_histogram( binwidth=3,
fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") +
theme_ipsum() + theme(plot.title = element_text(size=15))
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + ggtitle("Histograma de Residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point() + ggtitle("Dispersión de Residuos")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20, fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point() + ggtitle("Dispersión de Residuos")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point() + ggtitle("Dispersión de Residuos")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + xlabs("Residuos")
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "Residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point() + ggtitle("Dispersión de Residuos")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(color="#e9ecef", alpha=0.9) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(color="#e9ecef", alpha=0.5) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(color="#e9ecef", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,binwidth=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#69b3a2", color="#e9ecef", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals,bins=20) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#69b3a2", color="#e9ecef", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9, bins = 20) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#69b3a2", color="#e9ecef", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#69b3a2", color="#e9ecef", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram() + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point() + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#69b3a2", color="#e9ecef", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram(fill="#69b3a2", color="#00AFBB", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#69b3a2", color="#00AFBB", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram(fill="#00AFBB", color="#00AFBB", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#00AFBB", color="#00AFBB", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
y_hat <- modelo$fitted.values
y <- df2$trm
ggplot(aes(x=y, y=y_hat)) + geom_point()
y_hat <- modelo$fitted.values
y <- df2$trm
ggplot(x=y, y=y_hat) + geom_point()
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point()
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB")
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5)
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") + labs(x="valores TRM", y="predicción TRM")
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") + labs(x="valores TRM", y="predicción TRM") + theme(plot.title = element_text(hjust = 0.5))
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") +
labs(x="valores TRM", y="predicción TRM") + theme(plot.title = element_text(hjust = 0.5)) +
geom_abline(intercept = 45, slope = 1)
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") +
labs(x="valores TRM", y="predicción TRM") + theme(plot.title = element_text(hjust = 0.5)) +
geom_abline(intercept = 45, slope = 0)
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") +
labs(x="valores TRM", y="predicción TRM") + theme(plot.title = element_text(hjust = 0.5)) +
geom_abline(intercept = 0, slope = 45)
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") +
labs(x="valores TRM", y="predicción TRM") + theme(plot.title = element_text(hjust = 0.5)) +
geom_abline(intercept = 0, slope = 1)
y_hat <- modelo$fitted.values
y <- df2$trm
qplot(y,y_hat) + geom_point(color="#00AFBB", alpha=0.5) + ggtitle("Valores Reales de TRM vs. Predicción Modelo") +
labs(x="valores TRM", y="predicción TRM") + theme(plot.title = element_text(hjust = 0.5)) +
geom_abline(intercept = 0, slope = 1, color="red")
confint(modelo)
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 20)
y_values <- modelo$fitted.values[indices_aleatorios, 1]
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 20)
y_values <- modelo$fitted.values[indices_aleatorios]
y_hat <- predict(modelo, df2[indices_aleatorios, 2:4])
testMatrix <- data.frame(y_values, y_hat, round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "ERROR %")
print(testMatrix)
print(mean(testMatrix$`ERROR %`))
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 20)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, y_hat, round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "ERROR %")
print(testMatrix)
print(mean(testMatrix$`ERROR %`))
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, y_hat, round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "ERROR %")
print(testMatrix)
print(mean(testMatrix$`ERROR %`))
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, y_hat, y_values - y_hat, round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
print(mean(testMatrix$`ERROR %`))
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
print(mean(testMatrix$`ERROR %`))
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
print(mean(testMatrix$`ERROR %`))
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
boxplot(test$`ERROR %`)
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
boxplot(testMatrix$`ERROR %`)
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
boxplot(testMatrix$`SPREAD`)
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
qplot(testMatrix$`SPREAD`) + geom_boxplot() + ggtitle("Boxplot Spread Predicción TRM")
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
qplot() + geom_boxplot(testMatrix$`SPREAD`) + ggtitle("Boxplot Spread Predicción TRM")
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
boxplot(testMatrix$`SPREAD`)
# Test individual de valores aleatorios comparativos
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
boxplot(testMatrix$`SPREAD`, main="Dispersión Valores Predicción")
# Test individual de valores aleatorios comparativos
set.seed(042021)
indices_aleatorios <-  sample.int(dim(df2)[1], 10)
y_values <-df2[indices_aleatorios,1]
y_hat <- modelo$fitted.values[indices_aleatorios]
testMatrix <- data.frame(y_values, round(y_hat,2), round(y_values - y_hat,2), round(((y_hat/y_values)-1)*100,1))
colnames(testMatrix) = c("VALOR REAL", "PREDICCION", "SPREAD", "ERROR %")
print(testMatrix)
boxplot(testMatrix$`SPREAD`, main="Dispersión Valores Predicción")
knitr::opts_chunk$set(echo = TRUE)
# Cargar data frames en memoria
load("data/trm_df")
load("data/palma_df")
load("data/oro_df")
load("data/wti_df")
load("data/cafe_df")
load("data/banana_df")
load("data/niquel_df")
load("data/gasoil_df")
load("data/polipropileno_df")
load("data/hulla_df")
load("data/carbon_df")
# Merge data frames
df1 <- merge(trm_df, palma_df)
df1 <- merge(df1, oro_df)
df1 <- merge(df1, wti_df)
df1 <- merge(df1, cafe_df)
df1 <- merge(df1, banana_df)
df1 <- merge(df1, niquel_df)
df1 <- merge(df1, gasoil_df)
df1 <- merge(df1, polipropileno_df)
df1 <- merge(df1, hulla_df)
df1 <- merge(df1, carbon_df)
dim(df1)
library(ggcorrplot)
corr <- cor(df1[,-1])
ggcorrplot(corr,
hc.order = TRUE,
type = "lower",
lab = TRUE)
df2 <- df1[,c('trm','wti','niquel','carbon')]
summary(df2)
modelo <- lm(trm ~ wti + niquel + carbon, data = df2)
summary(modelo)
library(ggplot2)
library(gridExtra)
g1 <- qplot(modelo$residuals) + geom_histogram(fill="#00AFBB", color="#00AFBB", alpha=0.9) + ggtitle("Histograma de Residuos") + labs(x = "residuos")
g2 <- qplot(c(1:2922),modelo$residuals) + geom_point(fill="#00AFBB", color="#00AFBB", alpha=0.1) + ggtitle("Dispersión de Residuos") + labs(x="residuos", y="valores")
grid.arrange(g1, g2, nrow=1)
library(car)
vif(modelo)
shapiro(modelo$residuals)
shapiro.test(modelo$residuals)
shapiro.test(modelo$residuals)
shapiro.test(modelo$residuals)
install.packages("esquisse")
install.packages("esquisse")
esquisse::esquisser(palmerpenguins::penguins)
esquisse::esquisser(mtcars)
install.packages("UpSetR")
library(UpSetR)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
# example of list input (list of named vectors)
listInput <- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10),
three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))
# example of expression input
expressionInput <- c(one = 2, two = 1, three = 2, `one&two` = 1, `one&three` = 4,
`two&three` = 1, `one&two&three` = 2)
upset(fromList(listInput), order.by = "freq")
upset(movies, nsets = 6, number.angles = 30, point.size = 3.5, line.size = 2,
mainbar.y.label = "Genre Intersections", sets.x.label = "Movies Per Genre",
text.scale = c(1.3, 1.3, 1, 1, 2, 0.75))
upset(movies, sets = c("Action", "Adventure", "Comedy", "Drama", "Mystery",
"Thriller", "Romance", "War", "Western"), mb.ratio = c(0.55, 0.45), order.by = "degree")
install.packages(c("backports", "BH", "bitops", "blob", "boot", "broom", "callr", "car", "carData", "caret", "class", "cli", "cluster", "colorspace", "conquer", "corrgram", "corrplot", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "digest", "dplyr", "ellipsis", "fansi", "foreach", "foreign", "fs", "generics", "GGally", "ggfortify", "ggplot2", "ggsignif", "glue", "gower", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmlwidgets", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "lattice", "lava", "lifecycle", "lme4", "lubridate", "magick", "magrittr", "maptools", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "nlme", "nloptr", "nnet", "openintro", "openssl", "openxlsx", "pander", "pillar", "pROC", "processx", "pryr", "quantreg", "R6", "RcppArmadillo", "readr", "recipes", "reprex", "rio", "rlang", "rmarkdown", "rpart", "rvest", "seriation", "sp", "spatial", "statmod", "stringi", "summarytools", "survival", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tseries", "TSP", "TTR", "usdata", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2", "yaml", "zip"))
data(mtcars)
summary(mtcars)
install.packages(c("cluster", "MASS", "nlme", "survival"))
install.packages("tidyverse")
library(tidyverse)
qplot(mtcars)
qplot(mtcars$cyl, mtcars$wt)
plot(mtcars$cyl, mtcars$wt)
boxplot(mtcars$cyl, mtcars$wt)
boxplot(as.factor(mtcars$cyl), mtcars$wt)
boxplot(mtcars$wt, as.factor(mtcars$cyl))
boxplot(as.factor(mtcars$cyl), mtcars$wt, col = mtcars$cyl)
boxplot(as.factor(mtcars$cyl), mtcars$wt, col = mtcars$gear)
summary(mtcars)
as.factor(mtcars$cyl)
qplot(mtcars$wt)
qplot(mtcars$wt, type="l")
qplot(mtcars$wt, bins=5)
qplot(mtcars$wt, bins=10)
setwd("~/Documents/Academia/IBM-Data-Science-Certification/Tools for Data Science")
